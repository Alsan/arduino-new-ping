#summary 15 Sensors Example Sketch
#labels Featured

= 15 Sensors Example Sketch =

{{{
// ---------------------------------------------------------------------------
// This example code was used to successfully communicate with 15 ultrasonic sensors. You can adjust
// the number of sensors in your project by changing SONAR_NUM and the number of NewPing objects in the
// "sonar" array. You also need to change the pins for each sensor for the NewPing objects. Each sensor
// is pinged at 35ms intervals with one more step to process the results. So, one cycle of all sensors
// takes 528ms (33*(15+1)=528ms), this is the "pingCycle" constant. The results are sent to the
// "oneSensorCycle" function which currently just displays the distance data. Your project would normally
// process the sensor results in this function (for example, decide if a robot needs to turn and call the
// turn function). Keep in mind this example is event-driven. Your complete sketch needs to be written
// so there's no "delay" commands and the loop() cycles at faster than a 35ms rate. If other processes
// take longer than 33ms, you'll need to increase PING_INTERVAL so it doesn't get behind.
// ---------------------------------------------------------------------------
#include <NewPing.h>

#define SONAR_NUM     15 // Number or sensors.
#define MAX_DISTANCE 200 // Maximum distance (in cm) to ping.
#define PING_INTERVAL 33 // Milliseconds between sensor pings (29ms is about the min to avoid cross-sensor echo).

const int pingCycle = PING_INTERVAL * (SONAR_NUM + 1); // This is the time for one complete cycle of all sensors.
unsigned long pingTimer[SONAR_NUM + 1];                // +1 for timer that displays results.
unsigned int cm[SONAR_NUM];                            // Where the ping distances are stored.
uint8_t currentSensor = 0;                             // Keeps track of which sensor is active.

NewPing sonar[SONAR_NUM] = {     // Sensor object array.
  NewPing(41, 42, MAX_DISTANCE), // Each sensor's trigger pin, echo pin, and max distance to ping.
  NewPing(43, 44, MAX_DISTANCE),
  NewPing(45, 20, MAX_DISTANCE),
  NewPing(21, 22, MAX_DISTANCE),
  NewPing(23, 24, MAX_DISTANCE),
  NewPing(25, 26, MAX_DISTANCE),
  NewPing(27, 28, MAX_DISTANCE),
  NewPing(29, 30, MAX_DISTANCE),
  NewPing(31, 32, MAX_DISTANCE),
  NewPing(34, 33, MAX_DISTANCE),
  NewPing(35, 36, MAX_DISTANCE),
  NewPing(37, 38, MAX_DISTANCE),
  NewPing(39, 40, MAX_DISTANCE),
  NewPing(50, 51, MAX_DISTANCE),
  NewPing(52, 53, MAX_DISTANCE)
};

void setup() {
  Serial.begin(115200);
  pingTimer[0] = millis() + 75;             // First ping starts at 75ms, gives time for the Arduino to chill before starting.
  for (uint8_t i = 0; i < SONAR_NUM; i++) { // Sets the starting times for each sensor.
    pingTimer[i+1] = pingTimer[i] + PING_INTERVAL;
  }
}

void loop() {
  for (uint8_t i = 0; i <= SONAR_NUM; i++) { // Loop through all the sensors.
    if (millis() >= pingTimer[i]) {          // Is it this sensor's time to ping?
      pingTimer[i] += pingCycle;             // Set next time this sensor will be pinged.
      if (i == SONAR_NUM) oneSensorCycle();  // Sensor ping cycle complete, do something with the results.
      else {                                 // It's this sensor's time to ping.
        sonar[currentSensor].timer_stop();          // Make sure previous timer is canceled before starting a new ping (insurance).
        currentSensor = i;                          // Sensor being accessed.
        cm[currentSensor] = 0;                      // Make distance zero in case there's no ping echo for this sensor.
        sonar[currentSensor].ping_timer(echoCheck); // Do the ping (processing continues, interrupt will call echoCheck to look for echo).
      }
    }
  }
  // The rest of your code would go here.
}

void echoCheck() {
  // Don't put anything here! This function needs to be lean.
  if (sonar[currentSensor].check_timer()) { // Check to see if the ping was received.
    cm[currentSensor] = sonar[currentSensor].convert_cm(sonar[currentSensor].ping_result); // Set the sensor distance to the array.
  }
  // Don't put anything here! This function needs to be lean.
}

void oneSensorCycle() { // Sensor ping cycle complete, do something with the results.
  for (uint8_t i = 0; i < SONAR_NUM; i++) {
    Serial.print(i);
    Serial.print("=");
    Serial.print(cm[i]);
    Serial.print("cm ");
  }
  Serial.println();
}
}}}